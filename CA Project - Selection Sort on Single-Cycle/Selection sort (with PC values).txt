
00 addi x10, x0, 0x100
04 addi x14, x0, 15
08 sd x14, 0(x10)
12 addi x14, x0, 83
16 sd x14, 8(x10)
20 addi x14, x0, 6
24 sd x14, 16(x10)
28 addi x11, x0, 3

32 beq x0,x0,selectionSort
36 return: beq x0,x0, END    # beq, x0,x0, 152

#selection sort
#x10 : base address of array
#x11 : len(array)

40 selectionSort: addi x6, x0, 0 #i
44 add x7, x0, x11 #stop i
48 addi x28, x0, 0 #j
52 add x29, x0, x11 #stop j
56 blt x6, x7, Fori
60 beq x0,x0, EndFori									
64 addi x30, x0,0 #stores memory address based on data type

68 Fori: slli x30, x6, 3  # multiply by 3, since array is doubleword data type
72 add x30,x30,x10
76 ld x18, 0(x30)
80 add x28,x0,x6 # j = i
84 blt x28, x29, Forj #--> change							
88 beq x0,x0, EndForj                                                                 
92 addi x31, x0,0

96 Forj: slli x31,x28, 3
100 add x31,x31,x10
104 ld x19, 0(x31)
108 ld x18, 0(x30)   # NEW INSTRUCTION!
112 blt x19,x18, IF #--> change								
116 beq x0,x0, ENDIF													

120 IF: sw x19, 0(x30)
124 sd x18, 0(x31)
128 beq x0,x0,ENDIF							

132 ENDIF: addi x28,x28,1
136 blt x28,x29, Forj							

140 EndForj: addi x6, x6, 1
144 blt x6,x7,Fori							

148 EndFori: beq x0,x0,return

152 END:
